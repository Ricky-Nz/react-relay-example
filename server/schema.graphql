type App {
  id: ID!
  bannerCount: Int
  categories: [String]
  labels: [String]
  projectTypes: [String]
  projects(labels: [String], after: String, first: Int, before: String, last: Int): ProjectConnection
  promotes(after: String, first: Int, before: String, last: Int): ProjectConnection
  project(id: ID!): Project
}

input CreateProjectInput {
  password: String!
  name: String!
  index: String
  order: String
  category: String
  promote: String
  location: String
  type: String
  area: String
  status: String
  labels: [String]
  segments: [SegmentInput]
  clientMutationId: String!
}

type CreateProjectPayload {
  projectEdge: ProjectEdge
  app: App
  clientMutationId: String!
}

type Mutation {
  updateApp(input: UpdateAppInput!): UpdateAppPayload
  createProject(input: CreateProjectInput!): CreateProjectPayload
  updateProject(input: UpdateProjectInput!): UpdateProjectPayload
  removeProject(input: RemoveProjectInput!): RemoveProjectPayload
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Project {
  id: ID
  name: String
  index: String
  order: String
  category: String
  promote: String
  location: String
  type: String
  area: String
  status: String
  banner: String
  thumbnail: String
  labels: [String]
  segments: [Segment]
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]
}

type ProjectEdge {
  node: Project
  cursor: String!
}

type Query {
  app: App
}

input RemoveProjectInput {
  password: String!
  id: ID!
  clientMutationId: String!
}

type RemoveProjectPayload {
  deletedProjectId: String
  app: App
  clientMutationId: String!
}

type Segment {
  title: String
  content: String
  images: [String]
  mode: String
}

input SegmentInput {
  title: String
  content: String
  images: [String]
  mode: String
}

input UpdateAppInput {
  password: String!
  bannerCount: Int
  categories: [String]
  labels: [String]
  projectTypes: [String]
  clientMutationId: String!
}

type UpdateAppPayload {
  app: App
  clientMutationId: String!
}

input UpdateProjectInput {
  password: String!
  id: ID!
  name: String
  order: String
  category: String
  index: String
  promote: String
  location: String
  type: String
  area: String
  status: String
  banner: String
  thumbnail: String
  labels: [String]
  segments: [SegmentInput]
  clientMutationId: String!
}

type UpdateProjectPayload {
  project: Project
  clientMutationId: String!
}
